
R version 2.13.1 (2011-07-08)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(splicing)
> 
> options(width=60)
> 
> ## MVRNORM
> 
> set.seed(42)
> mu <- cbind(rep(1, 5))
> sigma <- sqrt(2)
> len <- as.integer(length(mu))
> as.vector(.Call("R_splicing_mvrnorm", mu, sigma, len, PACKAGE="splicing"))
[1] 2.6303535 0.3284569 1.4318349 1.7526047 1.4807588
> as.vector(.Call("R_splicing_mvrnorm", mu, sigma, len, PACKAGE="splicing"))
[1] 0.8737960 2.7975127 0.8874308 3.4003238 0.9254199
> as.vector(.Call("R_splicing_mvrnorm", mu, sigma, len, PACKAGE="splicing"))
[1]  2.5517603  3.7192950 -0.6516430  0.6684624  0.8414533
> as.vector(.Call("R_splicing_mvrnorm", mu, sigma, len, PACKAGE="splicing"))
[1]  1.7562767  0.6619644 -2.1590757 -1.9022206  2.5698882
> as.vector(.Call("R_splicing_mvrnorm", mu, sigma, len, PACKAGE="splicing"))
[1]  0.6353432 -1.1183447  0.7955547  2.4444998  3.2537775
> 
> ## LOGIT_INV
> 
> set.seed(42)
> x <- cbind(runif(10))
> as.vector(.Call("R_splicing_logit_inv", x, as.integer(length(x)-1L), 1L,
+                 PACKAGE="splicing"))
[1] 0.13554529 0.13859766 0.07228664 0.12457992 0.10315630
[6] 0.09124934 0.11341891 0.06212611 0.10474115
> 
> ## SCORE_JOINT
> 
> set.seed(42)
> gene <- createGene(list(c(1,100), c(201,300), c(401,500)),
+                    list(c(1,2), c(1,3), c(1,2,3)))
> 
> reads <- simulateReads(gene, expression=c(2/10, 3/10, 5/10),
+                        noReads=1000L, readLength=35)
> 
> assignment <- cbind(as.integer(sample(0:2, noReads(reads), replace=TRUE)))
> noreads <- as.integer(noReads(reads))
> psi <- cbind(c(2/10, 3/10, 5/10))
> hyper <- rep(1, noIso(gene))
> effisolen <- pmax(isoLength(gene)[[1]] - getReadLength(reads) + 1, 0)
> isoscores <- -log(effisolen)
> 
> .Call("R_splicing_score_joint", assignment, noreads, 1L, psi, hyper,
+       as.integer(effisolen), isoscores, PACKAGE="splicing")
[1] -6535.827
> 
> assignment <- cbind(as.integer(sample(0:2, noReads(reads), replace=TRUE,
+                                       prob=reads$sampleProb)))
> 
> .Call("R_splicing_score_joint", assignment, noreads, 1L, psi, hyper,
+       as.integer(effisolen), isoscores, PACKAGE="splicing")
[1] -6343.862
> 
> ## REASSIGN_SAMPLES
> 
> set.seed(42)
> gene <- createGene(list(c(1,100), c(201,300), c(401,500)),
+                    list(c(1,2), c(1,3), c(1,2,3)))
> 
> reads <- simulateReads(gene, expression=c(2/10, 3/10, 5/10),
+                        noReads=1000L, readLength=35)
> 
> matches <- matchIso(gene, reads=reads)
> match.order <- order(apply(matches, 2, paste, collapse=""))-1L
> psi <- cbind(c(2/10, 3/10, 5/10))
> noiso <- 3L
> 
> as.vector(.Call("R_splicing_reassign_samples", matches, match.order, psi,
+                 noiso, 1L, PACKAGE="splicing"))
   [1] 2 0 2 2 2 1 0 2 0 2 2 0 2 2 0 2 2 1 2 2 2 2 2 0 2 2 2
  [28] 2 2 2 1 1 2 2 2 2 2 1 2 1 1 2 0 2 2 2 0 1 2 1 2 2 0 2
  [55] 2 1 2 1 2 2 0 2 1 1 2 1 2 0 2 2 2 2 1 2 1 2 2 2 1 1 2
  [82] 2 2 2 2 1 2 2 0 1 2 2 1 2 0 2 1 2 2 2 1 2 1 2 0 2 2 0
 [109] 2 2 2 0 2 2 2 0 2 1 0 1 1 1 2 2 1 1 2 2 0 2 2 2 2 1 2
 [136] 2 2 2 2 2 1 2 2 2 2 1 0 2 1 2 1 1 2 1 2 2 1 2 2 1 2 0
 [163] 0 1 1 0 0 2 2 1 2 2 1 2 2 2 0 2 2 2 2 2 1 1 2 2 2 0 2
 [190] 2 1 2 2 1 2 2 1 2 1 2 2 2 2 2 1 2 2 2 0 2 1 2 0 2 2 2
 [217] 0 1 2 2 1 1 0 2 2 1 2 0 0 1 2 1 0 2 1 0 2 2 2 1 2 2 2
 [244] 2 0 2 2 2 2 2 2 1 2 2 2 0 2 2 2 1 2 0 2 2 2 2 2 1 2 2
 [271] 2 2 2 0 2 2 2 2 2 0 2 0 2 2 0 2 2 0 1 2 2 2 0 2 2 0 2
 [298] 2 2 1 1 2 0 1 1 1 2 2 1 1 1 2 0 0 1 2 2 0 1 0 0 0 2 1
 [325] 0 2 1 1 1 2 2 2 1 2 2 2 2 1 2 1 1 2 2 1 0 2 2 2 2 2 2
 [352] 2 2 0 2 2 1 0 0 0 2 2 2 2 2 2 2 2 2 1 0 1 2 2 2 0 1 0
 [379] 0 1 2 2 1 1 2 2 2 2 1 2 2 1 2 1 1 0 0 1 2 0 2 2 2 2 2
 [406] 1 2 1 1 2 2 2 2 0 2 0 2 1 2 2 2 2 2 2 2 2 2 0 2 2 2 2
 [433] 2 2 2 0 2 1 0 2 2 1 2 2 2 2 2 2 2 0 2 2 2 0 1 2 1 2 1
 [460] 0 2 2 2 0 2 2 2 2 0 2 2 2 2 2 2 0 2 2 1 2 0 2 2 2 0 2
 [487] 2 1 1 2 2 2 0 0 2 1 2 2 0 2 1 2 2 1 1 2 2 2 2 1 2 2 1
 [514] 0 2 1 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 0 0 2 2 2 1
 [541] 1 2 0 2 0 2 2 1 2 2 0 1 2 2 2 2 0 1 0 2 2 2 2 2 2 2 1
 [568] 2 1 2 0 1 2 1 1 2 1 2 2 2 1 2 2 2 2 2 2 1 2 2 1 2 0 2
 [595] 2 0 2 1 0 2 1 1 2 1 2 2 2 2 1 2 2 2 0 2 2 2 2 1 2 2 2
 [622] 2 2 2 0 1 1 2 2 2 2 1 1 2 1 2 0 1 1 1 1 2 2 2 0 0 2 1
 [649] 2 0 2 2 0 2 2 2 1 2 2 2 2 2 2 2 1 1 1 2 1 2 0 2 0 2 1
 [676] 1 1 2 0 2 2 1 2 1 2 2 0 1 2 2 2 1 2 1 0 1 1 0 2 2 1 2
 [703] 1 2 0 2 2 0 1 1 0 1 2 2 2 2 1 1 1 2 1 2 2 1 2 0 1 2 2
 [730] 0 2 2 1 1 2 0 2 2 1 2 2 0 2 2 2 1 0 2 2 0 2 2 2 1 2 0
 [757] 1 2 1 2 2 1 0 2 2 2 2 2 2 2 2 2 1 2 2 1 2 0 2 2 0 1 2
 [784] 1 0 1 1 2 2 1 2 2 1 2 2 1 2 1 2 2 1 2 1 2 0 1 2 2 1 2
 [811] 2 0 0 2 2 2 2 2 2 1 1 2 1 2 2 2 2 0 1 2 2 2 2 2 0 2 1
 [838] 2 1 2 2 2 2 1 1 0 2 2 2 1 1 2 0 2 2 0 0 1 2 2 2 2 1 1
 [865] 2 2 2 1 0 2 2 2 0 2 1 0 2 1 2 1 1 2 0 2 2 2 1 1 2 2 1
 [892] 2 0 2 1 2 2 1 2 2 2 2 2 0 2 1 2 1 2 2 2 1 2 2 2 2 2 2
 [919] 1 2 1 2 2 2 2 1 2 2 1 2 1 1 1 2 2 2 0 2 2 2 2 2 2 0 2
 [946] 0 2 2 1 0 1 2 1 2 2 0 2 2 2 1 2 2 2 2 2 0 0 1 1 2 2 0
 [973] 2 0 2 1 2 2 2 0 2 0 2 2 2 2 2 2 2 2 2 2 1 2 0 2 2 1 2
[1000] 2
> 
> ## DRIFT_PROPOSAL
> 
> set.seed(42)
> 
> ## init
> .Call("R_splicing_drift_proposal", 0L, NULL, NULL, 0.0, NULL, NULL, 2L, 1L,
+       0L, NULL, NULL, PACKAGE="splicing")
$psi
           [,1]
[1,] 0.91480604
[2,] 0.08519396

$alpha
     [,1]
[1,]    0

$sigma
[1] 0.05

> .Call("R_splicing_drift_proposal", 0L, NULL, NULL, 0.0, NULL, NULL, 3L, 1L,
+       0L, NULL, NULL, PACKAGE="splicing")
$psi
          [,1]
[1,] 0.3333333
[2,] 0.3333333
[3,] 0.3333333

$alpha
     [,1]
[1,]  0.5
[2,]  0.5

$sigma
[1] 0.02222222

> 
> ## propose
> psi <- cbind(c(3/4, 1/4))
> alpha <- cbind(0)
> sigma <- 0.05
> noiso <- nrow(psi)
> .Call("R_splicing_drift_proposal", 1L, psi, alpha, sigma, NULL, NULL, noiso,
+       1L, 0L, NULL, NULL, PACKAGE="splicing")
$psi
          [,1]
[1,] 0.5191241
[2,] 0.4808759

$alpha
           [,1]
[1,] 0.07653386

> 
> psi <- cbind(c(1/3, 1/3, 1/3))
> alpha <- cbind(c(1/2, 1/2))
> sigma <- 0.05
> noiso <- nrow(psi)
> .Call("R_splicing_drift_proposal", 1L, psi, alpha, sigma, NULL, NULL, noiso,
+       1L, 0L, NULL, NULL, PACKAGE="splicing")
$psi
          [,1]
[1,] 0.4336433
[2,] 0.3539572
[3,] 0.2123994

$alpha
          [,1]
[1,] 0.7137537
[2,] 0.5107074

> 
> ## score
> psi <- cbind(c(3/4, 1/4))
> alpha <- cbind(0)
> sigma <- 0.05
> otherpsi <- cbind(c(51/100, 49/100))
> otheralpha <- cbind(3/100)
> noiso <- length(psi)
> .Call("R_splicing_drift_proposal", 2L, psi, alpha, sigma, otherpsi,
+       otheralpha, noiso, 1L, 0L, NULL, NULL,
+       PACKAGE="splicing")
[1] -9.166418
> 
> ## METROPOLIS_HASTINGS_RATIO
> 
> set.seed(42)
> gene <- createGene(list(c(1,100), c(201,300), c(401,500)),
+                    list(c(1,2), c(1,3), c(1,2,3)))
> 
> reads <- simulateReads(gene, expression=c(2/10, 3/10, 5/10),
+                        noReads=1000L, readLength=35)
> 
> matches <- matchIso(gene, reads=reads)
> match.order <- order(apply(matches, 2, paste, collapse=""))-1L
> psi <- cbind(c(2/10, 3/10, 5/10))
> alpha <- cbind(c(1/3, 2/3))
> noiso <- 3L
> 
> set.seed(42)
> assignment <- .Call("R_splicing_reassign_samples", matches, match.order,
+                     psi, noiso, 1L, PACKAGE="splicing")
> 
> noreads <- noReads(reads)
> psinew <- cbind(c(5/10, 3/10, 2/10))
> alphanew <- cbind(c(1/2, 1/2))
> sigma <- 0.05
> effisolen <- pmax(isoLength(gene)[[1]] - getReadLength(reads) + 1L, 0L)
> hyperp <- rep(1, noiso)
> isoscores <- -log(effisolen)
> 
> .Call("R_splicing_metropolis_hastings_ratio", assignment, noreads, 1L,
+       psinew, alphanew, psi, alpha, sigma, noiso, as.integer(effisolen),
+       hyperp, isoscores, 1L,
+       PACKAGE="splicing")
$acceptP
[1] 1.846638e-121

$pcJS
[1] -6337.853

$ppJS
[1] -6589.657

> 
> .Call("R_splicing_metropolis_hastings_ratio", assignment, noreads, 1L,
+       psi, alpha, psinew, alphanew, sigma, noiso, as.integer(effisolen),
+       hyperp, isoscores, 1L,
+       PACKAGE="splicing")
$acceptP
[1] 5.415246e+120

$pcJS
[1] -6589.657

$ppJS
[1] -6337.853

> 
> ## RNG_GET_DIRICHLET
> 
> set.seed(42)
> alpha <- c(1,1,1,1)
> alpha2 <- c(1,2,3,4)
> .Call("R_splicing_rng_get_dirichlet", alpha, PACKAGE="splicing")
[1] 0.724127700 0.067367995 0.199555756 0.008948549
> .Call("R_splicing_rng_get_dirichlet", alpha2, PACKAGE="splicing")
[1] 0.03777539 0.07089311 0.59253154 0.29879996
> 
