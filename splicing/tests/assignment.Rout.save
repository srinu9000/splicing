
R version 2.15.0 (2012-03-30)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(splicing)
> 
> gene <- createGene(list(c(1,20), c(31,40)),
+                    list(c(1), c(1,2)))
> 
> assignmentMatrix(gene, readLength=5L, paired=TRUE,
+                  fragmentStart=20L, fragmentProb=1,
+                  normalMean=15, normalVar=0, numDevs=0)
     01 11
[1,]  0  1
[2,] 10  1
> 
> ###
> 
> gene <- createGene(list(c(1,10), c(21,30), c(41,50)),
+                    list(c(1,2), c(1,3), c(1,2,3)))
> 
> assignmentMatrix(gene, readLength=5L, paired=TRUE,
+                  fragmentStart=15L, fragmentProb=1,
+                  normalMean=15, normalVar=0, numDevs=0)
     001 010 101
[1,]   0   0   6
[2,]   0   6   0
[3,]  10   0   6
> 
> ###
> 
> gene <- createGene(list(c(1,20), c(31,40)),
+                    list(c(1), c(1,2)))
> 
> assignmentMatrix(gene, readLength=5, paired=TRUE,
+                  fragmentStart=13, fragmentProb=(1:5)/sum(1:5),
+                  normalMean=0, normalVar=0, numDevs=0)
     01       11
[1,]  0 5.333333
[2,] 10 5.333333
> 
> 
> ### Fast vs accurate
> 
> gene <- createGene(list(c(1,20), c(31,40)),
+                    list(c(1), c(1,2)))
> 
> am1 <- assignmentMatrix(gene, readLength=5, paired=TRUE,
+                         fragmentStart=13, fragmentProb=(1:5)/sum(1:5),
+                         normalMean=0, normalVar=0, numDevs=0)
> 
> am2 <- assignmentMatrix(gene, readLength=5, paired=TRUE, fast=TRUE,
+                         fragmentStart=13, fragmentProb=(1:5)/sum(1:5),
+                         normalMean=0, normalVar=0, numDevs=0)
> 
> all(nrow(am1)==nrow(am2) && ncol(am1)==ncol(am2) && abs(am1-am2) < 1e-13)
[1] TRUE
> 
> 
> proc.time()
   user  system elapsed 
  0.264   0.038   0.289 
